================================================================================
Requirements
================================================================================

* SDL2      (http://libsdl.org)

System Specific:
----------------
* Win32 API (Windows only  -- should be pre-installed with your C++ compiler)
* GTK+      (Linux only    -- http://developer.gnome.org) 
* Cocoa     (Mac OS X only -- should be pre-installed with Xcode)

================================================================================
Building the library with configure (Linux, Mac OS X, Cygwin)
================================================================================

The typical './configure; make; make install' should be enough to build and
install SDLU, assuming that SDL2 is properly installed in your system.
To update the configure scripts, just run './scripts/bootstrap'.

For Mac OS X users, if configure fails to locate SDL2.framework, use the
environment variable SDL2_FRAMEWORK:

  $ export SDL2_FRAMEWORK=/path/to/SDL2.framework
  $ ./configure; make; make install

To compile an application that uses the SDL utility library, you can use
pkg-config, or sdlu-config:

  $ gcc program.c -o program `pkg-config --libs --cflags sdlu` [flags]
  $ gcc program.c -o program `sdlu-config --libs --cflags` [flags]

Under Mac OS X, after building the library with configure, you can use
'framework.sh' to create SDLU.framework:
  
  $ ./scripts/build-scripts/framework.sh .libs/libSDLU.dylib

================================================================================
Building the library with CMake (Windows, Linux, Mac OS X)
================================================================================

If your system is not supported by configure (e.g. Windows), you can use CMake
to build SDLU. Either use CMake GUI to generate project files for your favorite
IDE, or from a terminal:

  $ cd /path/to/SDLU
  $ cmake .
  $ make

Using CPack, you can also generate .deb and .rpm packages.

================================================================================
Building for Android
================================================================================

To build SDLU for Android, you will need the SDL2 source code, as well as a good
understanding of how the SDL2 Android port works.

* Create a new android-project as explained in SDL2/README-android.txt (if you
  already have one, this step is not necessary).
* Move or symlink the SDLU directory into "jni/SDLU"
* Edit "jni/src/Android.mk" and add SDLU to LOCAL_SHARED_LIBRARIES
* Edit "SDLActivity.java" and add SDLU in the list of libraries returned by the
  getLibraries() function (line 71).
* Optionally, if you are building SDL2_ttf for your project anyway, edit
  'SDLU/Android.mk' to uncomment the SDL2_TTF_PATH line
* Run ndk-build

For Linux and Mac OS X, you can use android.sh, which does all of the above:

  $ cd (PATH TO SDLU SOURCES)
  $ ./scripts/build-scripts/android.sh (PATH TO ANDROID PROJECT)

================================================================================
Building for iOS
================================================================================

To build for iOS, you will need the SDL2 header files. Open 'Makefile.ios' with
your favourite editor and edit its settings to match your system. Then just open
a terminal and type:

  $ cd (PATH TO SDLU SOURCES)
  $ make -f Makefile.ios
  $ make -f Makefile.ios dist        <-- this bundles SDLU in a framework

Alternatively, to create a fat binary for all architectures, use ios.sh:

  $ cd (PATH TO SDLU SOURCES)
  $ ./scripts/build-scripts/ios.sh --sdldir=/path/to/SDL_headers

Run 'ios.sh --help' for a list of available options.


-- Aggelos Kolaitis
